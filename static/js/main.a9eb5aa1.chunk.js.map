{"version":3,"sources":["components/Movie.js","components/GetMovies.js","App.js","serviceWorker.js","index.js"],"names":["Movie","title","poster_path","overview","vote_average","release_date","imageApi","useState","open","setOpen","className","onClick","src","alt","Modal","onClose","Box","sx","position","top","left","transform","width","bgcolor","border","boxShadow","p","GetMovies","movies","setMovies","search","setSearch","useEffect","movies_fetching","fetch","then","res","json","data","results","console","log","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","required","map","movie","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wRAqCeA,EAlCF,SAAC,GAAiE,IAAhEC,EAA+D,EAA/DA,MAAQC,EAAuD,EAAvDA,YAAcC,EAAyC,EAAzCA,SAAWC,EAA8B,EAA9BA,aAAaC,EAAiB,EAAjBA,aAErDC,EAAa,mCAFyD,EAQlDC,oBAAS,GARyC,mBAQnEC,EARmE,KAQ7DC,EAR6D,KAU5E,OACE,yBAAKC,UAAU,SAEd,yBAAKA,UAAU,UAAUC,QAAS,kBAAMF,GAAQ,KAC7C,yBAAKG,IAAKN,EAASJ,EAAeW,IAAI,WACtC,yBAAKH,UAAU,YAAYP,IAE9B,4BAAKF,GACN,yBAAKS,UAAU,QAAO,8BAAON,GAA7B,KAAmD,2BAAIC,IAErD,kBAACS,EAAA,EAAD,CAAON,KAAMA,EAAMO,QAAS,kBAAMN,GAAQ,KACxC,kBAACO,EAAA,EAAD,CAAKC,GAhBG,CAAEC,SAAU,WAAYC,IAAK,MAAMC,KAAM,MAAOC,UAAW,wBAC3DC,MAAO,IAAKC,QAAS,mBAAoBC,OAAQ,iBAAkBC,UAAW,GAAIC,EAAG,IAgB3F,yBAAKhB,UAAU,aACZ,yBAAKE,IAAKN,EAASJ,EAAeW,IAAI,WACtC,yBAAKH,UAAU,aACZ,6BAAMP,SCOPwB,EA/BE,WAGjB,IAHsB,EAMQpB,mBAAS,IANjB,mBAMbqB,EANa,KAMNC,EANM,OAOQtB,mBAAS,IAPjB,mBAObuB,EAPa,KAONC,EAPM,KASpBC,qBAAU,WACRC,MAAuB,IAEvB,IAAMA,EAAiB,WAClBC,MAVM,uHAUQC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAAOT,EAAUS,EAAKC,SAAUC,QAAQC,IAAIH,EAAKC,aAMnG,OACE,yBAAK7B,UAAU,aACb,0BAAOgC,SANU,SAACC,GACnBA,EAAEC,iBACFV,MAbU,oGAaMJ,GAAQK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAAOT,EAAUS,EAAKC,cAK3E,2BAAOM,KAAK,SAASC,YAAY,eAAeC,MAAOjB,EAAQkB,SAAU,SAACL,GAAD,OAAKZ,EAAUY,EAAEM,OAAOF,QAAQG,UAAQ,IACjH,4BAAQL,KAAK,UAAb,WAEC,oEACD,yBAAKnC,UAAU,cAAf,WAA8BkB,QAA9B,IAA8BA,OAA9B,EAA8BA,EAAQuB,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,eAAOC,IAAKD,EAAME,IAAQF,UCjBnEG,MARf,WACE,OACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,QCIc8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjC,MAAK,SAAAkC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.a9eb5aa1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {Modal, Box}from '@mui/material';\r\n\r\nconst Movie =({title , poster_path , overview , vote_average,release_date}) =>{ \r\n\r\n  const imageApi =   'https://image.tmdb.org/t/p/w1280' ;         // from the API website\r\n\r\n  //Modal styling\r\n  const style = { position: 'absolute', top: '50%',left: '50%', transform: 'translate(-50%, -50%)',\r\n                width: 600, bgcolor: 'background.paper', border: '2px solid #000', boxShadow: 24, p: 4, };  \r\n  \r\n    const [open, setOpen] = useState(false); //store if modal is open or closed    \r\n   \r\n  return (                             //show the data for each item from API & show modal onclick\r\n    <div className=\"Movie\">\r\n\r\n     <div className='contain' onClick={() => setOpen(true)}> \r\n        <img src={imageApi+poster_path}   alt='poster' />\r\n        <div className='overview'>{overview}</div>\r\n     </div>\r\n     <h1>{title}</h1>\r\n    <div className='rate'><span>{vote_average}</span>  <p>{release_date}</p></div> \r\n\r\n      <Modal open={open} onClose={() => setOpen(false)}  >\r\n        <Box sx={style}>        \r\n          <div className='modalData'>\r\n             <img src={imageApi+poster_path}   alt='poster' />\r\n             <div className='modalText'>\r\n                <div>{overview}</div>\r\n             </div>\r\n          </div>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Movie;\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React , { useState , useEffect } from 'react';\r\nimport Movie from './Movie' ;\r\n\r\nconst GetMovies =() =>{ \r\n\r\n  //data from the API website\r\nconst getApi = 'https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=8b3086d8cc10f509a461783c237dd937&page=1'  ;\r\nconst searchApi = `https://api.themoviedb.org/3/search/movie?&api_key=8b3086d8cc10f509a461783c237dd937&page=1&query=`  ;\r\n    \r\n  const [movies,setMovies]  = useState([]) ;       //store api data\r\n  const [search,setSearch]  = useState('') ;       //store search value\r\n\r\n  useEffect(() => {                         //render the api fetch function\r\n    movies_fetching();  }, []) ;\r\n\r\n    const movies_fetching= ()=>{              //fetch api using fetch & promises\r\n         fetch(getApi).then(res => res.json()).then(data=>{setMovies(data.results); console.log(data.results) }) ;  }   \r\n\r\n   const handleSubmit =(e) =>{              //function of sumbit search by fetching search api\r\n     e.preventDefault();\r\n     fetch(searchApi+search).then(res => res.json()).then(data=>{setMovies(data.results);  }) ;  } \r\n        \r\n  return (                           //search form and pass api data as props\r\n    <div className=\"GetMovies\">\r\n      <form  onSubmit={handleSubmit}>\r\n     <input type=\"search\" placeholder=\"search movie\" value={search} onChange={(e)=>setSearch(e.target.value)} required/>\r\n     <button type=\"submit\" >Search</button>\r\n      </form>\r\n      <h2>Trending Movies / Search reasults : </h2>\r\n     <div className='moviesList'> {movies?.map(movie => <Movie key={movie.id} {...movie}/>) }</div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GetMovies;\r\n","import React from 'react';\nimport './App.css';\nimport GetMovies from './components/GetMovies';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GetMovies />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}